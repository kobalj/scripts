#!/bin/bash
# ---------------------------------------------------------------------------
# postges_slot - shell script template generator

# Copyright 2014, Jure Kobal <kobalj at gmail dot com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# Usage: postgres_slot [command]

# Revision history:
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

# Global variables
PREFIX="postgresql-"
DEST_DIR="/usr"
SRC_DIR="/usr/local"

FOLDER_MAP=("/include/postgresql" "/share/postgresql" "/lib/pgxs")

# Display help message
function help() {
  cat <<- _EOF_
  ${PROGNAME} ${VERSION}
  Script for manipulating with installed PostgreSQL slot.

  Options:
  
  -h, --help                Displays this help
  -a, --available           Displays the available slots
  -s [slot], --set [slot]   Sets/replaces the selected slot
  -r, --remove              Removes the selected slot

_EOF_
}

# Write info message
function write_info() {
  echo "$(tput setaf 2)$1$(tput sgr0)"
}

# Write warning message
function write_warning() {
  echo "$(tput setaf 1)$1$(tput sgr0)"
}

# Display coutner
function warning_count() {
  write_warning "$1 (Control-C to abort) in..."
  local i=6
  while [[ $[i--] -gt 0 ]] ; do
    echo -n " $i"
    sleep 1
  done
  echo ""
}

# Function to generate symbolic links for specific folders
function addfolders() {
  for i in "${FOLDER_MAP[@]}"; do
    if [ ! -d "$i" ]; then
      ln -s "$SRC_DIR/$PREFIX$slot$i" "$DEST_DIR$i"
    fi
  done
}

# Function to remove symbolic links if they exist
function delfolders() {
  for i in "${FOLDER_MAP[@]}"; do
    if [ -d "$DEST_DIR$i" ]; then
      rm "$DEST_DIR$i"
    fi
  done
}

# Get and return the list of available slots
function availableslots() {
  local list=($(find $SRC_DIR -maxdepth 1 -mindepth 1 -name "postgresql*" | awk -F'/' '{printf("%s\n",$4)}' | awk -F'-' '{printf("%s\n",$2)}' | uniq | sort))
  echo "${list[@]}"
}

# Display the available slots and mark the installed one
function display_slots() {
  local list=($(availableslots))

  # find the primary one
  write_info "Installed PostgreSQL libs:"
  write_info "--------------------------"
  for i in "${list[@]}"; do
    local sts=" "
    if [ "$i" == "$installedslot" ]; then
      local sts="$(tput setaf 2)*$(tput sgr0)"
    fi
    echo " ($sts) $i"
  done
}

# Get the slot version that is installed
function get_installedslot() {
  local path=$DEST_DIR${FOLDER_MAP[0]}

  if [ -d "$path" ]; then
    line=($(ls -l $path))
    installedslot=$(echo ${line[${#line[@]} - 1]} | awk -F'/' '{printf("%s\n",$4)}' | awk -F'-' '{printf("%s\n",$2)}') 
  else 
    installedslot=""
  fi
}

# Get the list of files that need to be installed
function getfiles() {
  local list=($(find "$SRC_DIR/$PREFIX$slot" -not -path "*share*" -not -path "*include*" -not -path "*pgxs*" -type f | sed "s/\/usr\/local\/$PREFIX$slot//"))
  echo "${list[@]}"
}

# Remove the files for the slot that is being removed
function removeinstalledslot() {
  local flist=($(getfiles))
  for i in "${flist[@]}"; do
    # remove files for the slot
    rm "$DEST_DIR$i"
  done

  # remove the folders 
  delfolders

  installedslot=""
}

# Install the selected slot
function installslot() {
  # first we do the maps
  addfolders

  # we do symbolic links for files
  local flist=($(getfiles))
  for i in "${flist[@]}"; do
    ln -s "$SRC_DIR/$PREFIX$slot$i" "$DEST_DIR$i"
  done
  
}

#-------------------------------------------------
# Main part of the script
#-------------------------------------------------

# Before start we get the installed slots
get_installedslot

if [ "$1" == "-a" ] || [ "$1" == "--available" ]; then
  display_slots
  exit
elif [ "$1" == "-s" ]; then
  array=($(availableslots))

  if [ "$2" != "" ]; then
    if [[ " ${array[@]} " =~ " $2 " ]]; then
      # found the slot, check if another slot is installed
      if [ "$installedslot" != "" ]; then
        write_warning "Found installed slot $installedslot"
        warning_count "Removing slot $2"
        slot=$installedslot
        removeinstalledslot
        write_info "Slot $slot removed"
      fi

      # installing new slot
      write_info "Installing slot $2"
      slot=$2
      installslot
      write_info "Slot $2 installed"

    else
      write_warning "Slot $2 is not available"
    fi
  else 
    write_warning "No slot provided"
  fi
  exit
elif [ "$1" == "-r" ] || [ "$1" == "--remove" ]; then
  if [ "$installedslot" != "" ]; then
    warning_count "Removing slot $installedslot"
    slot=$installedslot
    removeinstalledslot
    write_info "Slot $slot removed"
  else 
    write_warning "Slot is not set"
  fi
  exit
else
  help
  exit
fi

# EOF
